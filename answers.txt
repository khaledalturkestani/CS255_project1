1. Briefly describe your method for preventing the adversary from learning information about the lengths of the passwords stored in 
   your password manager.
        
   We used the padding function in our implementation to pad all passwords to maximum password length specified in the program. 
   Therefore all passwords stored in our password manager have the same length.

2. Briefly describe your method for preventing swap attacks (Section 2.2). Provide an argument for why the attack is prevented in 
   your scheme.

    1. The key-value-store in our password stores a pair of HMAC hashed domain name, and an authentication encrypted password 
       concatenated with the HMAC hash of its domain name.  
    2. keychain  = {HMAC(domain_name), AE(padded_password || HMAC(domain_name))}

    Proof by contradition: Assume there's an adversary that can successfully perform the swap attack. This means that the adversary
    can swap the record for 
              HMAC(domain_name1), AE(padded_password1 || HMAC(domain_name1)) 
          and HMAC(domain_name2), AE(padded_password2 || HMAC(domain_name2)) 
    such that the new records are 
              HMAC(domain_name1), AE(padded_password2 || HMAC(domain_name1)) 
          and HMAC(domain_name2), AE(padded_password1 || HMAC(domain_name2)).
    However, this means that the adversary broke AE() (i.e. AES-128/GCM) since he was able to correctly encrypt the new entries 
              padded_password2 || HMAC(domain_name1)
          and padded_password1 || HMAC(domain_name2).
    But AE() is secure. We have reached a contradiction. Thus, the scheme protects againts a swap attack.

3. In our proposed defense against the rollback attack (Section 2.2), we assume that we can store the SHA-256 hash in a trusted 
   location beyond the reach of an adversary. Is it necessary to assume that such a trusted location exists, in order to defend 
   against rollback attacks? Briefly justify your answer.

   Yes, it is necessary to assume that a trusted location exists. This is because if we assume that the hash is not saved in a secure
   storage location, our integrity scheme of padding the HMAC(domain_name) to the padded password only protects against swap attacks. 
   An adversary can swap the stored "AE(padded_password || HMAC(domain_name)" entry with an older 
   "AE(padded_password' || HMAC(domain_name)" entry, and the password manage won't be able to detect it because the HAMC(domain_name)
   will still match.

4. What if we had used a different MAC (other than HMAC) on the domain names to produce the keys for the key-value store?  
   Would the scheme still satisfy the desired security properties? Either show this, or give an example of a secure MAC for which 
   the resulting password manager implementation would be insecure.
    
   The reason HMAC satisfies the requirement for generating keys is that it is a PRF and is existentially unforgeable. If another 
   MAC satisfies these properites, then it is acceptable to replace HMAC with the new MAC.
     
5. In our specification, we leak the number of records in the password manager. Describe an approach to reduce or completely 
   eliminate the information leaked about the number of records.

   One -ideal- solution would be to set a large upper bound on the total number of passwords and have the password manager always
   occupying the same space on disk (with the unused space padded with random bits). However, this design would suffer from inefficient
   use of memory and storage.
    
   Another solution would be to pad the password manager with a random number of dummy records. So, every time we dump the password 
   manager, we pad it with a random number of dummy records. For example, if the password manager has 10 records, the dumped version 
   could be padded to 30 records at one intance and could be padded to 49 records at another intance.
 

